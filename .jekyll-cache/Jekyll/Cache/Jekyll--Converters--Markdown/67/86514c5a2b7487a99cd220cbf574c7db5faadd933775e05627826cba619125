I"!<link rel="stylesheet" href="/css/pygments.css" />

<p><a href="http://www.javacodegeeks.com/2013/04/function-interface-a-functional-interface-in-the-java-util-function-package-in-java-8.html">原文链接</a> 作者: <a href="http://www.javacodegeeks.com/author/Mohamed-Sanaulla/">Mohamed Sanaulla</a></p>

<p>　　早先我写了一篇<a href="http://blog.sanaulla.info/2013/03/21/introduction-to-functional-interfaces-a-concept-recreated-in-java-8/">《函数式接口》</a>，探讨了Java8中函数式接口的用法。如果你正在浏览Java8的API，你会发现java.util.function中 Function, Supplier, Consumer, Predicate和其他函数式接口广泛用在支持lambda表达式的API中。这些接口有一个抽象方法，会被lambda表达式的定义所覆盖。在这篇文章中，我会简单描述Function接口，该接口目前已发布在java.util.function中。</p>

<p>　　Function接口的主要方法：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="no">R</span> <span class="nf">apply</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">)</span> <span class="c1">//将Function对象应用到输入的参数上，然后返回计算结果。</span>

<span class="k">default</span> <span class="o">&lt;</span><span class="no">V</span><span class="o">&gt;</span> <span class="nc">Function</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;</span> <span class="c1">//将两个Function整合，并返回一个能够执行两个Function对象功能的Function对象。</span></code></pre></figure>

<!-- more -->

<p>　　译者注：Function接口中除了apply()之外全部接口如下：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="k">default</span> <span class="o">&lt;</span><span class="no">V</span><span class="o">&gt;</span> <span class="nc">Function</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;</span> <span class="nf">andThen</span><span class="o">(</span><span class="nc">Function</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">R</span><span class="o">,?</span> <span class="kd">extends</span> <span class="no">V</span><span class="o">&gt;</span> <span class="n">after</span><span class="o">)</span> <span class="c1">//返回一个先执行当前函数对象apply方法再执行after函数对象apply方法的函数对象。</span>

<span class="k">default</span> <span class="o">&lt;</span><span class="no">V</span><span class="o">&gt;</span> <span class="nc">Function</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span><span class="no">V</span><span class="o">&gt;</span> <span class="nf">compose</span><span class="o">(</span><span class="nc">Function</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">V</span><span class="o">,?</span> <span class="kd">extends</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">before</span><span class="o">)</span> <span class="c1">//返回一个先执行before函数对象apply方法再执行当前函数对象apply方法的函数对象。</span>

<span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Function</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">identity</span><span class="o">()</span> <span class="c1">//返回一个执行了apply()方法之后只会返回输入参数的函数对象。</span></code></pre></figure>

<p>　　本章节将会通过创建接受Function接口和参数并调用相应方法的例子探讨apply方法的使用。我们同样能够看到API的调用者如何利用lambda表达式替代接口的实现。除了传递lambda表达式之外，API使用者同样可以传递方法的引用，但这样的例子不在本篇文章中。</p>

<p>　　如果你想把接受一些输入参数并将对输入参数处理过后的结果返回的功能封装到一个方法内，Function接口是一个不错的选择。输入的参数类型和输出的结果类型可以一致或者不一致。一起来看看接受Function接口实现作为参数的方法的例子：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> 
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FunctionDemo</span> <span class="o">{</span>

    <span class="c1">//API which accepts an implementation of</span>

    <span class="c1">//Function interface</span>

    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">modifyTheValue</span><span class="o">(</span><span class="kt">int</span> <span class="n">valueToBeOperated</span><span class="o">,</span> <span class="nc">Function</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">function</span><span class="o">){</span>

        <span class="kt">int</span> <span class="n">newValue</span> <span class="o">=</span> <span class="n">function</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">valueToBeOperated</span><span class="o">);</span>

        <span class="cm">/*     
         * Do some operations using the new value.     
         */</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">newValue</span><span class="o">);</span>

    <span class="o">}</span>

<span class="o">}</span>
    </code></pre></figure>

<p>　　下面是调用上述方法的例子：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> 
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

    <span class="kt">int</span> <span class="n">incr</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span>  <span class="kt">int</span> <span class="n">myNumber</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>

    <span class="n">modifyTheValue</span><span class="o">(</span><span class="n">myNumber</span><span class="o">,</span> <span class="n">val</span><span class="o">-&gt;</span> <span class="n">val</span> <span class="o">+</span> <span class="n">incr</span><span class="o">);</span>

    <span class="n">myNumber</span> <span class="o">=</span> <span class="mi">15</span><span class="o">;</span>  <span class="n">modifyTheValue</span><span class="o">(</span><span class="n">myNumber</span><span class="o">,</span> <span class="n">val</span><span class="o">-&gt;</span> <span class="n">val</span> <span class="o">*</span> <span class="mi">10</span><span class="o">);</span>

    <span class="n">modifyTheValue</span><span class="o">(</span><span class="n">myNumber</span><span class="o">,</span> <span class="n">val</span><span class="o">-&gt;</span> <span class="n">val</span> <span class="o">-</span> <span class="mi">100</span><span class="o">);</span>

    <span class="n">modifyTheValue</span><span class="o">(</span><span class="n">myNumber</span><span class="o">,</span> <span class="n">val</span><span class="o">-&gt;</span> <span class="s">"somestring"</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">+</span> <span class="n">val</span> <span class="o">-</span> <span class="mi">100</span><span class="o">);</span>

<span class="o">}</span>
    </code></pre></figure>

<p>　　你可以看到，接受1个参数并返回执行结果的lambda表达式创建在例子中。这个例子的输入如下：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> 
<span class="mi">30</span>

<span class="mi">150</span>

<span class="o">-</span><span class="mi">85</span>

<span class="o">-</span><span class="mi">75</span>
    </code></pre></figure>
:ET