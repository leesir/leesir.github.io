I"R<link rel="stylesheet" href="/css/pygments.css" />

<p>作者: Jakob Jenkov</p>

<p>　　本小节会简要概括Java IO中的序列化以及涉及到的流，主要包括ObjectInputStream和ObjectOutputStream。</p>

<p>#Serializable</p>

<p>　　<a href="http://tutorials.jenkov.com/java-io/serializable.html">原文链接</a></p>

<p>　　如果你希望类能够序列化和反序列化，必须实现Serializable接口，就像所展示的ObjectInputStream和ObjectOutputStream例子一样。</p>

<p>　　对象序列化本身就是一个主题。Java IO系列教程主要关注流、reader和writer，所以我不会深入探讨对象序列化的细节。并且，目前在网上已经有很多文章探讨了对象序列化，我将给出几个深入分析的资料链接，不再赘述。链接如下：</p>

<p>http://java.sun.com/developer/technicalArticles/Programming/serialization/</p>

<!-- more -->

<p>#ObjectInputStream</p>

<p>　　<a href="http://tutorials.jenkov.com/java-io/objectinputstream.html">原文链接</a></p>

<p>　　ObjectInputStream能够让你从输入流中读取Java对象，而不需要每次读取一个字节。你可以把InputStream包装到ObjectInputStream中，然后就可以从中读取对象了。代码如下：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> 
<span class="nc">ObjectInputStream</span> <span class="n">input</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectInputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="s">"object.data"</span><span class="o">));</span>

<span class="nc">MyClass</span> <span class="n">object</span> <span class="o">=</span> <span class="o">(</span><span class="nc">MyClass</span><span class="o">)</span> <span class="n">input</span><span class="o">.</span><span class="na">readObject</span><span class="o">();</span> <span class="c1">//etc.</span>

<span class="n">input</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    </code></pre></figure>

<p>　　在这个例子中，你读取的对象必须是MyClass的一个实例，并且必须事先通过ObjectOutputStream序列化到“object.data”文件中。(译者注：ObjectInputStream和ObjectOutputStream还有许多read和write方法，比如readInt、writeLong等等，详细信息请查看<a href="http://docs.oracle.com/javase/7/docs/api/">官方文档</a>)</p>

<p>　　在你序列化和反序列化一个对象之前，该对象的类必须实现了java.io.Serializable接口。</p>

<p>#ObjectOutputStream</p>

<p>　　<a href="http://tutorials.jenkov.com/java-io/objectoutputstream.html">原文链接</a></p>

<p>　　ObjectOutputStream能够让你把对象写入到输出流中，而不需要每次写入一个字节。你可以把OutputStream包装到ObjectOutputStream中，然后就可以把对象写入到该输出流中了。代码如下：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> 
<span class="nc">ObjectOutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectOutputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="s">"object.data"</span><span class="o">));</span>

<span class="nc">MyClass</span> <span class="n">object</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MyClass</span><span class="o">();</span>  <span class="n">output</span><span class="o">.</span><span class="na">writeObject</span><span class="o">(</span><span class="n">object</span><span class="o">);</span> <span class="c1">//etc.</span>

<span class="n">output</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    </code></pre></figure>

<p>　　例子中序列化的对象object现在可以从ObjectInputStream中读取了。</p>

<p>　　同样，在你序列化和反序列化一个对象之前，该对象的类必须实现了java.io.Serializable接口。</p>
:ET