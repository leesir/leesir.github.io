I"v-<link rel="stylesheet" href="/css/pygments.css" />

<p>作者: Jakob Jenkov</p>

<p>　　本小节会简要概括Java IO中的PushbackReader，LineNumberReader，StreamTokenizer，PrintWriter，StringReader，StringWriter。</p>

<p>#PushbackReader</p>

<p>　　<a href="http://tutorials.jenkov.com/java-io/pushbackreader.html">原文链接</a></p>

<p>　　PushbackReader与PushbackInputStream类似，唯一不同的是PushbackReader处理字符，PushbackInputStream处理字节。代码如下：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> 
<span class="nc">PushbackReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PushbackReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileReader</span><span class="o">(</span><span class="s">"c:\\data\\input.txt"</span><span class="o">));</span>

<span class="kt">int</span> <span class="n">data</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">read</span><span class="o">();</span>

<span class="n">reader</span><span class="o">.</span><span class="na">unread</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
    </code></pre></figure>

<p>　　同样可以设置缓冲区大小，代码如下：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> 
<span class="nc">PushbackReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PushbackReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileReader</span><span class="o">(</span><span class="s">"c:\\data\\input.txt"</span><span class="o">),</span> <span class="mi">8</span><span class="o">);</span>
    </code></pre></figure>

<!-- more -->

<p>#LineNumberReader</p>

<p>　　<a href="http://tutorials.jenkov.com/java-io/linenumberreader.html">原文链接</a></p>

<p>　　LineNumberReader是记录了已读取数据行号的BufferedReader。默认情况下，行号从0开始，当LineNumberReader读取到行终止符时，行号会递增(译者注：换行\n，回车\r，或者换行回车\n\r都是行终止符)。</p>

<p>　　你可以通过getLineNumber()方法获取当前行号，通过setLineNumber()方法设置当前行数(译者注：setLineNumber()仅仅改变LineNumberReader内的记录行号的变量值，不会改变当前流的读取位置。流的读取依然是顺序进行，意味着你不能通过setLineNumber()实现流的跳跃读取)。代码如下：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> 
<span class="nc">LineNumberReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LineNumberReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileReader</span><span class="o">(</span><span class="s">"c:\\data\\input.txt"</span><span class="o">));</span>

<span class="kt">int</span> <span class="n">data</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">read</span><span class="o">();</span>

<span class="k">while</span><span class="o">(</span><span class="n">data</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">){</span>

    <span class="kt">char</span> <span class="n">dataChar</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span> <span class="n">data</span><span class="o">;</span>

    <span class="n">data</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">read</span><span class="o">();</span>

    <span class="kt">int</span> <span class="n">lineNumber</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">getLineNumber</span><span class="o">();</span>

<span class="o">}</span>
    </code></pre></figure>

<p>　　如果解析的文本有错误，LineNumberReader可以很方便地定位问题。当你把错误报告给用户时，如果能够同时把出错的行号提供给用户，用户就能迅速发现并且解决问题。</p>

<p>#StreamTokenizer</p>

<p>　　<a href="http://tutorials.jenkov.com/java-io/streamtokenizer.html">原文链接</a></p>

<p>　　StreamTokenizer(译者注：请注意不是StringTokenizer)可以把输入流(译者注：InputStream和Reader。通过InputStream构造StreamTokenizer的构造函数已经在JDK1.1版本过时，推荐将InputStream转化成Reader，再利用此Reader构造StringTokenizer)分解成一系列符号。比如，句子”Mary had a little lamb”的每个单词都是一个单独的符号。</p>

<p>　　当你解析文件或者计算机语言时，为了进一步的处理，需要将解析的数据分解成符号。通常这个过程也称作分词。</p>

<p>　　通过循环调用nextToken()可以遍历底层输入流的所有符号。在每次调用nextToken()之后，StreamTokenizer有一些变量可以帮助我们获取读取到的符号的类型和值。这些变量是：</p>

<ul>
  <li>ttype 读取到的符号的类型(字符，数字，或者行结尾符)</li>
  <li>sval 如果读取到的符号是字符串类型，该变量的值就是读取到的字符串的值</li>
  <li>nval 如果读取到的符号是数字类型，该变量的值就是读取到的数字的值</li>
</ul>

<p>　　代码如下：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> 
<span class="nc">StreamTokenizer</span> <span class="n">tokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StreamTokenizer</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringReader</span><span class="o">(</span><span class="s">"Mary had 1 little lamb..."</span><span class="o">));</span>

<span class="k">while</span><span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">nextToken</span><span class="o">()</span> <span class="o">!=</span> <span class="nc">StreamTokenizer</span><span class="o">.</span><span class="na">TT_EOF</span><span class="o">){</span>

    <span class="k">if</span><span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">ttype</span> <span class="o">==</span> <span class="nc">StreamTokenizer</span><span class="o">.</span><span class="na">TT_WORD</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">sval</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">ttype</span> <span class="o">==</span> <span class="nc">StreamTokenizer</span><span class="o">.</span><span class="na">TT_NUMBER</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">nval</span><span class="o">);</span>

    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">ttype</span> <span class="o">==</span> <span class="nc">StreamTokenizer</span><span class="o">.</span><span class="na">TT_EOL</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

    <span class="o">}</span>

<span class="o">}</span>
    </code></pre></figure>

<p>　　译者注：TT_EOF表示流末尾，TT_EOL表示行末尾。</p>

<p>　　StreamTokenizer可以识别标示符，数字，引用的字符串，和多种注释类型。你也可以指定何种字符解释成空格、注释的开始以及结束等。在StreamTokenizer开始解析之前，所有的功能都可以进行配置。请查阅官方文档获取更多信息。</p>

<p>#PrintWriter</p>

<p>　　<a href="http://tutorials.jenkov.com/java-io/printwriter.html">原文链接</a></p>

<p>　　与PrintStream类似，PrintWriter可以把格式化后的数据写入到底层writer中。由于内容相似，不再赘述。</p>

<p>　　值得一提的是，PrintWriter有更多种构造函数供使用者选择，除了可以输出到文件、Writer以外，还可以输出到OutputStream中(译者注：PrintStream只能把数据输出到文件和OutputStream)。</p>

<p>#StringReader</p>

<p>　　<a href="http://tutorials.jenkov.com/java-io/stringreader.html">原文链接</a></p>

<p>　　StringReader能够将原始字符串转换成Reader，代码如下：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> 
<span class="nc">Reader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringReader</span><span class="o">(</span><span class="s">"input string..."</span><span class="o">);</span>

<span class="kt">int</span> <span class="n">data</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">read</span><span class="o">();</span>

<span class="k">while</span><span class="o">(</span><span class="n">data</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>

    <span class="c1">//do something with data...</span>

    <span class="n">doSomethingWithData</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>

    <span class="n">data</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">read</span><span class="o">();</span>

<span class="o">}</span>

<span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    </code></pre></figure>

<p>#StringWriter</p>

<p>　　<a href="http://tutorials.jenkov.com/java-io:-stringwriter.html">原文链接</a></p>

<p>　　StringWriter能够以字符串的形式从Writer中获取写入到其中数据，代码如下：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> 
<span class="nc">StringWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringWriter</span><span class="o">();</span>

<span class="c1">//write characters to writer.</span>

<span class="nc">String</span> <span class="n">data</span> <span class="o">=</span> <span class="n">writer</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>

<span class="nc">StringBuffer</span> <span class="n">dataBuffer</span> <span class="o">=</span> <span class="n">writer</span><span class="o">.</span><span class="na">getBuffer</span><span class="o">();</span>
    </code></pre></figure>

<p>　　toString()方法能够获取StringWriter中的字符串数据。</p>

<p>　　getBuffer()方法能够获取StringWriter内部构造字符串时所使用的StringBuffer对象。</p>
:ET