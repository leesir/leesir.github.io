I"<link rel="stylesheet" href="/css/pygments.css" />

<p>作者: Jakob Jenkov</p>

<p>　　本小节会简要概括Java IO中Buffered和data的输入输出流，主要涉及以下4个类型的流：BufferedInputStream，BufferedOutputStream，DataInputStream，DataOutputStream。</p>

<p>#BufferedInputStream</p>

<p>　　<a href="http://tutorials.jenkov.com/java-io/bufferedinputstream.html">原文链接</a></p>

<p>　　BufferedInputStream能为输入流提供缓冲区，能提高很多IO的速度。你可以一次读取一大块的数据，而不需要每次从网络或者磁盘中一次读取一个字节。特别是在访问大量磁盘数据时，缓冲通常会让IO快上许多。</p>

<p>　　为了给你的输入流加上缓冲，你需要把输入流包装到BufferedInputStream中，代码如下：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> 

<span class="nc">InputStream</span> <span class="n">input</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedInputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="s">"c:\\data\\input-file.txt"</span><span class="o">));</span>

    </code></pre></figure>

<p>　　很简单，不是吗？你可以给BufferedInputStream的构造函数传递一个值，设置内部使用的缓冲区设置大小(译者注：默认缓冲区大小8 * 1024B)，就像这样：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> 

<span class="nc">InputStream</span> <span class="n">input</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedInputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="s">"c:\\data\\input-file.txt"</span><span class="o">),</span> <span class="mi">8</span> <span class="o">*</span> <span class="mi">1024</span><span class="o">);</span>

    </code></pre></figure>

<p>　　
　　这个例子设置了8KB的缓冲区。最好把缓冲区大小设置成1024字节的整数倍，这样能更高效地利用内置缓冲区的磁盘。</p>

<p>　　除了能够为输入流提供缓冲区以外，其余方面BufferedInputStream基本与InputStream类似。</p>

<!-- more -->

<p>#BufferedOutputStream</p>

<p>　　<a href="http://tutorials.jenkov.com/java-io/bufferedoutputstream.html">原文链接</a></p>

<p>　　与BufferedInputStream类似，BufferedOutputStream可以为输出流提供缓冲区。可以构造一个使用默认大小缓冲区的BufferedOutputStream(译者注：默认缓冲区大小8 * 1024B)，代码如下：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> 
<span class="nc">OutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedOutputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="s">"c:\\data\\output-file.txt"</span><span class="o">));</span>
    </code></pre></figure>

<p>　　也可以手动设置缓冲区大小，代码如下：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nc">OutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedOutputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="s">"c:\\data\\output-file.txt"</span><span class="o">),</span> <span class="mi">8</span> <span class="o">*</span> <span class="mi">1024</span><span class="o">);</span>
    </code></pre></figure>

<p>　　为了更好地使用内置缓冲区的磁盘，同样建议把缓冲区大小设置成1024的整数倍。</p>

<p>　　除了能够为输出流提供缓冲区以外，其余方面BufferedOutputStream基本与OutputStream类似。唯一不同的时，你需要手动flush()方法确保写入到此输出流的数据真正写入到磁盘或者网络中。</p>

<p>#DataInputStream</p>

<p>　　<a href="http://tutorials.jenkov.com/java-io/datainputstream.html">原文链接</a></p>

<p>　　DataInputStream可以使你从输入流中读取Java基本类型数据，而不必每次读取字节数据。你可以把InputStream包装到DataInputStream中，然后就可以从此输入流中读取基本类型数据了，代码如下：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nc">DataInputStream</span> <span class="n">input</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DataInputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="s">"binary.data"</span><span class="o">));</span>

<span class="kt">int</span> <span class="n">aByte</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">read</span><span class="o">();</span>

<span class="kt">int</span> <span class="n">anInt</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">readInt</span><span class="o">();</span>

<span class="kt">float</span> <span class="n">aFloat</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">readFloat</span><span class="o">();</span>

<span class="kt">double</span> <span class="n">aDouble</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="na">readDouble</span><span class="o">();</span><span class="c1">//etc.</span>

<span class="n">input</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    </code></pre></figure>

<p>　　当你要读取的数据中包含了int，long，float，double这样的基本类型变量时，DataInputStream可以很方便地处理这些数据。</p>

<p>#DataOutputStream</p>

<p>　　<a href="http://tutorials.jenkov.com/java-io/dataoutputstream.html">原文链接</a></p>

<p>　　DataOutputStream可以往输出流中写入Java基本类型数据，例子如下：</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"> 

<span class="nc">DataOutputStream</span> <span class="n">output</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DataOutputStream</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="s">"binary.data"</span><span class="o">));</span>

<span class="n">output</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="mi">45</span><span class="o">);</span>

<span class="c1">//byte data output.writeInt(4545);</span>

<span class="c1">//int data output.writeDouble(109.123);</span>

<span class="c1">//double data  output.close();</span>

    </code></pre></figure>

<p>　　其他方面与DataInputStream类似，不再赘述。</p>
:ET