<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Derrick Lee's Blog</title>
		<description>译文分享</description>
		<link>http://localhost:4000</link>
		<atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Java语法糖</title>
				<description>&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/pygments.css&quot; /&gt;

&lt;p&gt;       语法糖并不是Java独有的概念，而是一个计算机术语，先来看看百度百科的释义：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;语法糖（Syntactic sugar），也译为糖衣语法，是由英国计算机科学家彼得·约翰·兰达（Peter J. Landin）发明的一个术语，指计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/post_2019_06_06_image1.jpg&quot; alt=&quot;Syntactic Suger&quot; height=&quot;70%&quot; width=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
       Java语言可以支持某些关键字或者语法的使用，但在编译后的字节码中，却看不到这些代码的痕迹。语法糖可以在性能无损的情况下，提高编程的效率，增加代码可读性，几乎所有的现代编程语言都含有语法糖成分。今天来简单回顾一下Java语言截止至今所包含的语法糖。
注：必须显示指定vm启动参数-ea或者-enableassertions，才可以让assert生效:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 
&lt;span class=&quot;c1&quot;&gt;//以下代码为命令行启动java的范例，各个IDE也有相应修改参数的地方，这里不再赘述&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ea&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enableassertions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;学习前准备&quot;&gt;学习前准备&lt;/h3&gt;

&lt;p&gt;       如果想要查看反编译后的代码，强烈建议不要使用IDE自带的反编译插件，因为这类图形化工具很可能会把语法糖重新”糖化“，让代码高度还原，
但这会对学习语法糖造成一定困惑。&lt;/p&gt;

&lt;p&gt;       以IDEA IntelliJ 2019.1版本为例，断言测试代码：&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/post_2019_06_06_image1.png&quot; alt=&quot;assert1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
       以IDEA IntelliJ 反编译后的代码为：&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/post_2019_06_06_image2.png&quot; alt=&quot;assert1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
       可以看到代码是高度一致的，然而用javap工具查看字节码文件，可以看到代码里会抛出AssertionError:&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/post_2019_06_06_image3.png&quot; alt=&quot;assert1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;       很明显，IDE反编译插件给出的代码，并不是真正字节码的样子，而是优化后的代码。
现在我们用另外一个&lt;a href=&quot;http://www.benf.org/other/cfr/&quot;&gt;反编译工具CFR&lt;/a&gt;尝试一下。笔者下载的版本是cfr-0.145.jar，执行以下命令：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt; 
&lt;span class=&quot;c1&quot;&gt;//参数sugarasserts为false，表示不需要把assert重新糖化&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cfr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.145&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestAssertByteCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sugarasserts&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;       执行CFR后得到的反编译代码如下：&lt;/p&gt;

&lt;p class=&quot;center&quot;&gt;&lt;img src=&quot;/images/post_2019_06_06_image4.png&quot; alt=&quot;assert1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
       这才是我们想要的效果，可以看到assert实际上是通过是否开启断言的变量$assertionsDisabled和源代码里的断言表达式进行逻辑与&amp;amp;&amp;amp;来实现的，如果为false，则抛出AssertionError。
本篇博文以CFR为例，浅析Java目前所包含的语法糖。&lt;/p&gt;

&lt;h2 id=&quot;语法糖列表&quot;&gt;&lt;strong&gt;语法糖列表&lt;/strong&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;内部类、条件编译、assert关键字(JDK 1.4及更早版本)&lt;/li&gt;
  &lt;li&gt;泛型、for-each、自动拆装箱、枚举、可变参数列表(JDK 1.5)&lt;/li&gt;
  &lt;li&gt;switch-with-String、switch-with-enum、try-with-resource(JDK 1.7)&lt;/li&gt;
  &lt;li&gt;lambda(JDK 1.8)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;p&gt;[1] &lt;a href=&quot;http://www.benf.org/other/cfr/&quot;&gt;CFR - another java decompiler&lt;/a&gt;[EB/OL].http://www.benf.org/other/cfr/，2019-06-06.&lt;br /&gt;
[2] &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html&quot;&gt;Programming With Assertions&lt;/a&gt;[EB/OL].https://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html，2019-06-06.&lt;br /&gt;&lt;/p&gt;

</description>
				<pubDate>Thu, 06 Jun 2019 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/2019/06/java-javasuger</link>
				<guid isPermaLink="true">http://localhost:4000/2019/06/java-javasuger</guid>
			</item>
		
			<item>
				<title>Java的历史</title>
				<description>&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/pygments.css&quot; /&gt;

&lt;p&gt;       从第一代Java 1.0版本的发布至今，已有接近21年的时间了。21年里，计算机及互联网领域，出现了行业红利，出现了泡沫，出现了危机。伴随着行业起伏的大浪潮，同样出现了许许多多的市值千亿美金级别的软件、互联网公司。&lt;/p&gt;

&lt;p&gt;       截止至目前，最新版本的Java 8的体系架构如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2016_08_14_image1.png&quot; alt=&quot;Java8_structure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;       接下来，从1991年~2000年（Java的古代）、2002年~2006年（Java 的近代）、2006年至今（Java的现代）3个时间段，简单介绍一下Java语言诞生至今的重要时刻的时间线。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;       1991年4月起，就职于Sun公司的&lt;a href=&quot;https://en.wikipedia.org/wiki/James_Gosling&quot;&gt;James Gosling博士&lt;/a&gt;，主持Oak语言的开发计划，目标是让Oak能在各种电子产品上无差别地运行。想法很好，然而Oak并不成功。在Sun即将完全放弃该项目计划时，Oak，这艘快要沉没的小船，踏上了互联网的大浪，从此走向了巅峰。&lt;/p&gt;

&lt;p&gt;       1995年5月，Sun公司将Oak语言正式更名为Java，并发布了Java 1.0版本，同时提出了我们所熟知的“Write once, Run Anywhere”的口号，此时的Java还没有JDK、JRE一说。&lt;/p&gt;

&lt;p&gt;       1996年1月，JDK1.0诞生了，同JDK一同发布的还有一个纯解释执行的虚拟机、界面开发的AWT等（时间久远，已经很难找到JDK 1.4之前版本的文档了）。同年，已经有不少公司使用Java Applet开发web应用了。由于早期Java解释执行的性能与C/C++差了很远，性能问题一直是让开发者诟病的重点。&lt;/p&gt;

&lt;p&gt;       1997年2月，Sun公司发布了JDK 1.1，此版本的一些重要特性，成为了今后Java整个生态系统的重要支撑点，如RMI、JDBC、反射等。此版本也规范了Jar文件的格式。同年，Sun收购了HotSpot虚拟机的开发商，巩固了Sun在虚拟机领域的地位，HotSpot虚拟机成为JDK 1.3以后的默认虚拟机（Sun自研的虚拟机产品Classic VM，远不如其他公司的虚拟机高效、稳定）。&lt;/p&gt;

&lt;p&gt;       1998年12月，JDK 1.2发布，工程代号为Playground。Sun公司把Java的技术体系拆分为3个方向，分别是J2EE、J2SE、J2ME，分别为面向企业的企业级Java、面向桌面应用的标准版Java、面向移动设备开发的微型版Java（我本人对这几个名词没什么概念）。此版本的虚拟机内置了JIT编译器，同时在语言层面丰富了集合框架。&lt;/p&gt;

&lt;p&gt;       2000年5月，JDK 1.3发布。该版本新增了一些类库，如Timer等。改进了RMI、2D的实现。此后，1999年发布的HotSpot虚拟机成为JDK默认的虚拟机，并且每两年发布以动物命名的主版本，主版本之间的各种修复、增强小版本以昆虫命名。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2016_08_14_image2.png&quot; alt=&quot;JDK timeline from 1.0 - 1.3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;       2002年2月，JDK 1.4发布，此版本引入了非阻塞IO，包名为java.nio，让Java在服务器开发的领域更进了一步。除此之外，新增了日志，以及Throwable的部分方法。&lt;br /&gt;
       JDK 1.4是很多目前流行的开源框架（如spring）能够运行的最低版本，同时也为以后高性能IO框架（netty、mina）的出现打下了基础。
不得不提的是，.NET Framework也与同年发布，在此后的十多年里，Java和.NET互相学习互相进步，在各自领域都取得了相当不错的成绩。&lt;/p&gt;

&lt;p&gt;       2004年，JDK 1.5发布，此版本在语法上做了大量改进，比如泛型、for-each、自动拆装箱等。
新增了一个重量级api包：java.util.concurrent，新增了非常常用的Future、ThreadPoolExecutor、原子操作类java.util.concurrent.atomic.*等。
此版本发布，也使得Java程序员在并发编程的时候，不需要手动创建线程，转而使用更为合理的线程池的实现方式。&lt;/p&gt;

&lt;p&gt;       2006年，JDK 1.6发布，此版本没有对Java的易用性做任何改进，主要改进了JVM内部的一些实现，如垃圾回收，类加载等，这也是笔者接触Java的第一个版本。&lt;/p&gt;

&lt;p&gt;       插一句题外话，Sun公司于2009年被Oracle收购，在此之前，由于公司经营、经济危机等问题，Java每两年更新一个Major版本的目标已经无法保持，本应于2008年发布的JDK 1.7跳票了。
根据JDK 1.7的规划，该版本包含了许多语法层面和JVM层面的更新，比如Lambda（推迟到JDK 1.8），Jigsaw（推迟到JDK 1.9），G1垃圾收集器等。
Oracle在收购Sun之后，把JDK 1.7的计划做了重大调整，把Lambda、Jigsaw等项目推迟到JDK 1.8版本。&lt;/p&gt;

&lt;p&gt;       2011年，JDK 1.7姗姗来迟，此版本提升了JVM性能，提供G1收集器。除此之外，&lt;br /&gt;
       新增api：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;fork-join框架&lt;/li&gt;
  &lt;li&gt;java.nio.file包，增强了对文件系统的读写访问能力。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       新增语法：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;新增try-with-resources&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;单个catch语句可以捕获多个exception，比如catch (IOException&lt;/td&gt;
          &lt;td&gt;SQLException ex)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;       2014年，jdk 1.8发布，此版本包含了Hotspot虚拟机的一些更新，比如移除了永久代PermGen，&lt;a href=&quot;http://openjdk.java.net/jeps/122&quot;&gt;详细说明点此链接。&lt;/a&gt;&lt;br /&gt;
       首先，《Java虚拟机规范》中并没有规定JVM一定要包含PermGen区域，其次，在收购Sun之后，Oracle已经拥有2个商业上较为成功的JVM: JRocket, Hotspot。Oracle曾因此宣布要将这俩JVM取长补短，不排除合二为一的可能性，由此可见PermGen的移除是虚拟机改造的第一步。&lt;br /&gt;
       在语法层面上，此版本新增了接口的默认方法和Lambda等。在api层面上，新增了java.util.stream和java.time等。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;       从Java的历史版本更新内容来看，在语法及语言特性层面，有新功能对旧功能的取代，比如JDK 1.8的时间日期库。有不断增强的新功能，比如集合和并发库。有汲取其他语言的优秀特性，比如Lambda函数式编程。&lt;br /&gt;
       在JVM层面，Java开发团队更是做出了巨大的努力，让内存管理逐渐由多方诟病转变为语言优势。垃圾收集器的推陈出新，内存管理的改造，锁优化，类加载优化，所有这些努力都为了让Java更高效，更具竞争力。&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;
&lt;p&gt;[1] 周志明.&lt;a href=&quot;https://item.jd.com/11252778.html&quot;&gt;深入理解Java虚拟机&lt;/a&gt;[M].北京：机械工业出版社，2013：5-9.&lt;br /&gt;
[2] Jon Masamitsu.&lt;a href=&quot;http://openjdk.java.net/jeps/122&quot;&gt;JEP 122: Remove the Permanent Generation&lt;/a&gt;[EB/OL].http://openjdk.java.net/jeps/122，2010-08-15/2019-06-05.&lt;br /&gt;
[3] Oracle.&lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html&quot;&gt;What’s New in JDK 8&lt;/a&gt;[EB/OL].https://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html.&lt;br /&gt;
[4] Oracle.&lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/jdk7-relnotes-418459.html&quot;&gt;Java SE 7 Features and Enhancements&lt;/a&gt;[EB/OL].https://www.oracle.com/technetwork/java/javase/jdk7-relnotes-418459.html.&lt;br /&gt;
[5] Oracle.&lt;a href=&quot;https://www.oracle.com/technetwork/java/javase/features-141434.html&quot;&gt;Highlights of Technology Changes in Java SE 6&lt;/a&gt;[EB/OL].https://www.oracle.com/technetwork/java/javase/features-141434.html.&lt;br /&gt;&lt;/p&gt;
</description>
				<pubDate>Sun, 14 Aug 2016 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/2016/08/java-history</link>
				<guid isPermaLink="true">http://localhost:4000/2016/08/java-history</guid>
			</item>
		
			<item>
				<title>Java历史开篇语</title>
				<description>&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/pygments.css&quot; /&gt;

&lt;p&gt;       见过不少技术团队的leader，写过多年的业务，做了管理岗。说好听点叫业务，难听点就是增删改查，顶多加上mq、缓存、rpc之类的。&lt;/p&gt;

&lt;p&gt;       如果在一家公司做了多年，晋升做管理，确实无可厚非，因为这位管理者对本公司的业务和技术架构的演变都非常熟悉。怕就怕在跳到了其他公司做管理，业务背景不同，技术架构又不适用，之前积累的深厚经验就大打折扣了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2016-07-15_image1.jpg&quot; alt=&quot;Java&quot; height=&quot;100%&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;       确实，也没那么多技术驱动的公司，哪怕是BAT，大多也都是做业务（当然也有做中间件的，不占多数），归根结底还是赚钱最重要，不做业务大家都没饭吃（笔者不是说BAT业务简单，他们那个量级，哪怕是增删改查都十分困难）。所以作为开发者，想要冒出头来，必须保持学习的劲头。&lt;/p&gt;

&lt;p&gt;       要么走纯粹管理路线，要有人格魅力、领导力，能协调，能说服别人，能拉拢人心，能给小弟争取利益。&lt;/p&gt;

&lt;p&gt;       要么走偏技术路线，把基础搞扎实，把知识面扩大，掌握原理和学习方法，应对未来的新形势。&lt;/p&gt;

&lt;p&gt;       然而要做到上述任何一项，都不简单。不少做管理的，晋升的原因竟然是“年限到了”，技术不扎实，管理也做不好。恰恰又是他们，掌握着技术部门的生杀大权。&lt;/p&gt;

&lt;p&gt;       就拿Java开发最基础的工具JDK来说，有多少团队的leader还在以“稳定性”为由一直坚持使用JDK6，却拿不出数据证明新版JDK不适用于该公司的业务。&lt;/p&gt;

&lt;p&gt;       这种理由，犯了很明显的逻辑错误：JDK6稳定，并不代表JDK7、JDK8不稳定。相反，JDK7和JDK8做了很多改进，比如增强了并发库和集合库。&lt;/p&gt;

&lt;p&gt;       而以“兼容性”为由的说法就更离谱了，JDK开发团队考虑兼容性还比不过你一个做业务的？&lt;/p&gt;

&lt;p&gt;       诸如此类的问题数不胜数，在基层工作的小伙伴每每聚在一起抱怨leader时，都很愤慨，而当他们多年之后也走上这种管理路线时，却又忘记了这样的管理者会给手底下的人造成多大的困惑。&lt;/p&gt;

&lt;p&gt;       抱怨归抱怨，也要看看自身问题。作为基层员工的你（包括我），有没有尝试去说服leader呢？是不是同样因为学艺不精，找不出好理由挑战现状呢？&lt;/p&gt;

&lt;p&gt;       本系列博客以抱怨现状开始，先简单介绍Java历史，再引出各版本JDK的改进，为自己，也为各位看了博文的小伙伴，增加点还价的胜算。&lt;/p&gt;

</description>
				<pubDate>Fri, 15 Jul 2016 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/2016/07/java-history-beginning-words</link>
				<guid isPermaLink="true">http://localhost:4000/2016/07/java-history-beginning-words</guid>
			</item>
		
			<item>
				<title>项目总结-2016年07月11日</title>
				<description>&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/pygments.css&quot; /&gt;

&lt;h3 id=&quot;关于数据同步&quot;&gt;关于数据同步&lt;/h3&gt;
&lt;p&gt;同步流程异步化是提升程序响应、服务解耦的一个非常常用的手段。而对于某些业务来说，异步是唯一的选择，比如支付业务。当拿到某个订单的交易结果时，该结果并不代表最终的支付结果，而支付公司会通过回调或者由调用方轮询访问接口获取真实的支付结果。&lt;/p&gt;

&lt;p&gt;笔者所涉及的项目中，同样涉及到“交易——对账——数据”这类不能实时获得数据的问题。用户的操作调用合作方的接口产生了交易之后，新的交易数据生成在合作方的数据库里（即使是合作方，也不会实时得到支付结果，最终会与银行打交道）。如何在用户无感知的情况下进行数据的同步，是提高用户体验的一个关键点。在项目研发过程中经历了许多轮的讨论与实践，现在笔者将数据同步功能的发展历程简单介绍一下。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h4 id=&quot;第一个版本&quot;&gt;第一个版本&lt;/h4&gt;

&lt;p&gt;起初的版本，用户访问交易数据，数据流程图如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2016_07_11_image1.png&quot; alt=&quot;image1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;服务器仅作为路由转发客户端的请求给合作方，将合作方返回的数据返回给客户端。这种方案几乎满足不了任何产品需求，唯一的好处是实现简单，上线周期短。&lt;/p&gt;

&lt;h4 id=&quot;第二个版本&quot;&gt;第二个版本&lt;/h4&gt;

&lt;p&gt;由于清楚了第一个版本的劣势，从这个版本开始，我们需要将数据存入自己的数据库，提供丰富的参数供客户端访问，以实现多样的产品需求，数据流程图如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2016_07_11_image2.png&quot; alt=&quot;image2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注：本文中的所有图中，数字n与n`是异步关系，无先后顺序。&lt;/p&gt;

&lt;p&gt;当客户端请求查询交易数据接口时，服务器先将数据库内的数据返回，然后启动一个异步的同步任务更新数据。&lt;/p&gt;

&lt;p&gt;异步更新程序会检测该用户是否在不久之前同步过，如果否则执行同步，是则忽略同步请求，节省服务器资源。&lt;/p&gt;

&lt;p&gt;较第一个版本而言，本方案响应更快（除去了第三方接口的访问时间），同时能满足更多样化的需求。然而缺点也是明显的：当用户不使用客户端时，数据依然是旧数据，客服经常会收到用户的投诉电话。&lt;/p&gt;

&lt;h4 id=&quot;第三个版本&quot;&gt;第三个版本&lt;/h4&gt;

&lt;p&gt;在第二个版本的基础之上，我们引入了更多“触发点”的概念，即用户在操作某些功能的时候，由客户端调用一个接口，通知服务器该去同步用户数据了。&lt;/p&gt;

&lt;p&gt;数据流程图与第二个版本的图一致，通过更频繁的同步让数据持续更新。&lt;/p&gt;

&lt;p&gt;常用的触发点有：用户打开app（如登录、解锁手势密码）、发生交易（购买、赎回、撤销订单）、查询交易数据（查看资产、交易记录）。&lt;/p&gt;

&lt;p&gt;通过上述触发点的触发同步，用户的投诉已经明显减少了，效果良好。但是该版本功能与上版本功能的核心思想一致，唯一不同的是该版本的触发点比上版本的触发点丰富许多，所以依然解决不了用户不使用客户端的情况下数据不会更新的问题。&lt;/p&gt;

&lt;h4 id=&quot;第四个版本&quot;&gt;第四个版本&lt;/h4&gt;

&lt;p&gt;到目前为止，查询服务及后台异步的同步任务处在同一个程序中。接口访问量已经逐渐上来了，所以是时候做点架构上的调整了。&lt;/p&gt;

&lt;p&gt;第一步：数据库主从读写分离。&lt;/p&gt;

&lt;p&gt;第二步：查询服务增加机器，使用阿里云的负载均衡。&lt;/p&gt;

&lt;p&gt;第三步：分离查询服务及同步程序。&lt;/p&gt;

&lt;p&gt;所以整个架构就变成了下面的样子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2016_07_11_image3.png&quot; alt=&quot;image3&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;第五个版本&quot;&gt;第五个版本&lt;/h4&gt;

&lt;p&gt;在上个版本中，触发点建立在用户主动的行为上。在这个版本，我们引入了定时任务。类似余额宝，收益数据每日更新，所以服务器负载最低的凌晨2点-5点，我们的定时任务会把全量交易用户的交易数据更新一遍。数据流程图如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2016_07_11_image4.png&quot; alt=&quot;image4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这个版本，只要合作方可以承受大批量集中式的接口访问，就能很好的解决之前版本的问题，用户在不使用客户端的时候数据依然会自动更新。&lt;/p&gt;

&lt;h4 id=&quot;第六个版本&quot;&gt;第六个版本&lt;/h4&gt;

&lt;p&gt;第五个版本的全量交易用户数据的同步，造成了服务器资源的浪费，同时合作方也不时向我方抱怨。&lt;/p&gt;

&lt;p&gt;由此，我们引入了“交易用户等级”的概念，不同等级的用户会有不同的同步频率，典型的等级有：羊毛客（仅低额交易过一次）、通过活动吸引的用户（有活动才交易，没活动不交易，羊毛客属于最低档次的活动用户）、活跃交易用户（用户每周都会有交易）。&lt;/p&gt;

&lt;p&gt;针对活跃交易用户，更新频率至少每天一次。活动用户及羊毛客则根据同步结果动态调整更新频率，如一开始1天一次，当多次同步回来的数据为空时（无持仓），则频率降为2天一次，依次循环，直到同步到了有效数据，更新频率才还原为1天一次。&lt;/p&gt;

&lt;p&gt;第六个版本的方案在第五个版本基础上，通过统计交易数据、交易频率，对交易用户打上了不同等级的同步标签，过滤了大部分羊毛客及活动用户，让服务器资源集中为活跃交易用户服务。&lt;/p&gt;

&lt;h4 id=&quot;第七个版本&quot;&gt;第七个版本&lt;/h4&gt;
&lt;p&gt;第七个版本为技术驱动的版本。触发式的任务，更应该关注的是一种通知，而非其处理过程，所以作为查询服务，不应该了解同步程序的接口细节。同时，当上游用户请求过多时，会造成同时需要同步的任务过多。因此，将接口调用改成消息队列，主要是为了解耦和流量控制（可根据消费能力投递消息）。&lt;/p&gt;

&lt;p&gt;到了这个版本，程序调用关系如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2016_07_11_image5.png&quot; alt=&quot;image5&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;展望&quot;&gt;展望&lt;/h4&gt;
&lt;p&gt;至此，用户数据同步程序的演变告一段落。笔者相信在不久之后，同步程序就需要多机部署。而引入集群的架构之后，问题会接踵而来。&lt;/p&gt;

&lt;p&gt;先来看看数据重复的情况：当某台机器接收到消息执行同步时，另外的机器也收到了消息，这时，为了防止多个程序同时执行同一个用户同步请求造成数据错乱或者重复，需要有所处理。&lt;/p&gt;

&lt;p&gt;方案一：可以在数据库建立用户id和流水号的唯一索引，通过数据库保证数据不重复。但是这样做会产生大量的错误和错误日志，性能极其低下，而且单个用户的数据根本就不需要同时同步多次，造成服务器资源浪费。&lt;/p&gt;

&lt;p&gt;方案二：通过数据库模拟分布式锁，如memcache的cas，mysql的乐观锁等。当且仅当线程成功更新标识字段时，表明该线程已经获得了锁，可以执行同步逻辑，否则抛弃掉本次同步请求。&lt;/p&gt;

&lt;p&gt;方案三：采用zookeeper、chubby等解决分布式一致性的框架，实现自己的分布式锁服务。&lt;/p&gt;

&lt;p&gt;除了数据重复之外，还要诸如高可用、负载均衡等问题需要解决。&lt;/p&gt;
</description>
				<pubDate>Mon, 11 Jul 2016 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/2016/07/project-summary-2</link>
				<guid isPermaLink="true">http://localhost:4000/2016/07/project-summary-2</guid>
			</item>
		
			<item>
				<title>Project Summary 1</title>
				<description>&lt;h1 id=&quot;项目总结-2016年07月11日&quot;&gt;项目总结-2016年07月11日&lt;/h1&gt;

&lt;h3 id=&quot;线上服务健康状况监控与统计&quot;&gt;线上服务健康状况监控与统计&lt;/h3&gt;

&lt;p&gt;统计与监控，个人感觉主要是离线与在线的区别。统计强调的是定时或者定量的离线数据分析，产生各项报表，用于对后续程序的优化及重构做决策。监控则对线上程序的实时状态做出反馈，需要在很短的时间间隔内对程序健康状况生成可视化的结果。一般来说，能满足监控需求的组件，也可满足统计的需求。&lt;/p&gt;

&lt;p&gt;针对进程的监控，市面上已经有许多解决方案了。如可以通过zabbix监控PHP实例，通过JMX端口 + jConsole或者visual VM远程监控JVM实例。&lt;/p&gt;

&lt;p&gt;对于web服务，利用nginx + zabbix（本身可监控服务器各项指标，如cpu、IO、网络等），可实现单个接口粒度的执行情况统计，如次数、平均响应时间、总响应时间等等。&lt;/p&gt;

&lt;p&gt;对于RPC服务的程序，同样可以利用入口的负载均衡LB实现监控&lt;/p&gt;
</description>
				<pubDate>Mon, 11 Jul 2016 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/2016/07/project-summary-1</link>
				<guid isPermaLink="true">http://localhost:4000/2016/07/project-summary-1</guid>
			</item>
		
			<item>
				<title>对包装类型变量使用synchronized不当造成的同步不正确</title>
				<description>&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/pygments.css&quot; /&gt;

&lt;p&gt;关于关键字synchronized使用不当，造成未同步或者同步不正确，是开发过程中常见的问题。先引出3个问题：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;同步synchronized的底层实现原理是什么？&lt;/li&gt;
  &lt;li&gt;对非常量或者非单例对象上使用synchronized，会有什么效果？&lt;/li&gt;
  &lt;li&gt;对包装类型使用synchronized，会有什么效果？&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- more --&gt;

&lt;h4 id=&quot;1-同步synchronized的底层实现原理是什么&quot;&gt;1. 同步synchronized的底层实现原理是什么？&lt;/h4&gt;

&lt;p&gt;在对象上使用synchronized，会尝试获取对象的锁。获取成功之后，程序可以进入到同步代码块中执行逻辑。如果获取失败，则会进入到等待该对象锁的等待队列中。试图获取null的锁的操作都将抛出空指针异常，null在虚拟机内部的表示不属于虚拟机规范，所以不同的虚拟机可能会有不同的实现方式。&lt;/p&gt;

&lt;p&gt;对象锁是非公平的（可以使用java.util.concurrent.locks.Lock的实现类实现公平锁，当然会有额外的性能消耗），也就是说，唤醒线程时，并不参考其等待时间，在极端情况下，线程会出现饿死的情况。&lt;/p&gt;

&lt;p&gt;通过synchronized使用对象锁，不需要显示地获取或者释放锁。在编译（前端编译，即javac或者类似编译器，不是JIT编译）过后，如果synchronized同步的是代码块，字节码文件中会存在monitorenter与monitorexit，2个虚拟机指令实现代码块的进入与退出，这也是虚拟机规范之一。而同步方法则不会显示这两个指令，因为同步方法的实现细节不属于虚拟机规范，各个商用虚拟机会有不同的细节，当然，也可以通过monitorenter和monitorexit来实现。感兴趣的读者可以动手写个简单的类，通过命令查看反编译后的执行指令。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;javap -c -p yourPath/TestClass
&lt;/div&gt;
&lt;p&gt;注：TestClass是类名，不是TestClass.class或者TestClass.java等文件名。&lt;/p&gt;
&lt;h4 id=&quot;2-对非常量或者非单例对象上使用synchronized会有什么效果&quot;&gt;2. 对非常量或者非单例对象上使用synchronized，会有什么效果？&lt;/h4&gt;

&lt;p&gt;理解了synchronized的实现原理，就来看看对非常量或者非单例对象上使用synchronized，会有什么效果。&lt;/p&gt;

&lt;p&gt;显而易见，当不是常量或者非单例，不同的执行线程有可能会在不同的对象上获取、释放锁，这些不同的对象是不会互相影响的，所以有可能会出现没有同步的情况。&lt;/p&gt;

&lt;p&gt;所以，当我们使用一个内部私有对象实现同步的时候，需要将该变量定义成常量，如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monitor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;对于Spring等对象容器来说，你需要关注通过配置文件往容器加入的对象，是否是单例（Spring默认是单例，既scope = singleton）。非单例的对象，当应用程序向容器索取对象时，容器可能会返回一个新建的对象。&lt;/p&gt;

&lt;h4 id=&quot;3-对包装类型使用synchronized会有什么效果&quot;&gt;3. 对包装类型使用synchronized，会有什么效果？&lt;/h4&gt;

&lt;p&gt;首先，因为包装类型是对象，所以对包装类型使用synchronized同样适用第2点，即存在非常量及非单例对同步逻辑的影响。&lt;/p&gt;

&lt;p&gt;其次，包装类型有特殊的逻辑。当把基本变量赋值给包装类型的变量（其实编译过后的操作就是调用包装类型的静态方法valueOf）或者调用静态valueOf方法时：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Boolean返回的是缓存的对象。&lt;/li&gt;
  &lt;li&gt;整型（Byte,Short,Integer,Long）会检查该数字是否在1个字节可表示的有符号整数范围内（-128~127），是则返回缓存对象，否则返回新对象。&lt;/li&gt;
  &lt;li&gt;Character会缓存整型值为0~127的字符，同样会检查字符是否落在缓存范围中，是则返回，否则返回新对象。&lt;/li&gt;
  &lt;li&gt;Double和Float的valueOf方法始终返回新对象。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以，当我们对非常量的包装类型，如Boolean类型的变量上使用同步时，比如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//thread1&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果另外的线程thread2执行了flag = true，即flag = Boolean.valueOf(true)，之后又马上获取flag的对象锁，假设Boolean缓存的TRUE的对象锁可用的情况下，线程会立即执行同步代码，此时程序的行为看上去像是同步失效了。&lt;/p&gt;

&lt;p&gt;不过运气好的话，执行flag = false后立即获取对象锁，则thread2会等到thread1执行完毕后才进入同步代码块，同步会生效，因为获取的是同一个对象锁。&lt;/p&gt;

&lt;p&gt;因此，这种程序不仅是面向对象程序，还是面向运气程序。&lt;/p&gt;
</description>
				<pubDate>Sun, 03 Jul 2016 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/2016/07/summary-synchronized-error</link>
				<guid isPermaLink="true">http://localhost:4000/2016/07/summary-synchronized-error</guid>
			</item>
		
			<item>
				<title>包装类型在条件运算中的使用不当造成的空指针异常</title>
				<description>&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/pygments.css&quot; /&gt;

&lt;p&gt;虽然已有几年开发经验，但是工作中发现，这程序中的坑啊，踩的也真是不亦乐乎，很是惭愧。&lt;/p&gt;

&lt;p&gt;即使是最最基础的Java语言本身的特性，也有点儿说不清道不明了。大家都曾努力学习过，都正在努力地工作，为什么一些错误总是一而再再而三的犯呢？我想这不是个人基础的问题，而是没有认真总结与回顾。&lt;/p&gt;

&lt;p&gt;所以，即日起，小弟我会把工作上学习中遇到的问题都记录下来，可能有些问题会很白痴，然而不惧贻笑大方方能进步。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;这第一个问题便是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;包装类型在条件运算中的使用不当造成的空指针异常。
&lt;/div&gt;

&lt;p&gt;我们曾在教科书上学到过，条件表达式&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;等价于&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;所以&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;等价于&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;接下来介绍我的发现。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//InnerClass的简化定义如下：&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InnerClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testBoxedTypeWithIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;InnerClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InnerClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;idValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;idValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;flag的值为true，所以程序毫无疑问会打印出null。&lt;/p&gt;

&lt;p&gt;根据if判断和条件运算的等价关系，我在程序中用了如下的方式实现逻辑：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testBoxedTypeWithConditionalOperation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;InnerClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InnerClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果使用一样的测试用例，肯定有人会认为这段程序也输出null，至少之前的我是这么认为的。这段程序运行的结果是抛出空指针异常，我们来看看testBoxedTypeWithConditionalOperation方法和testBoxedTypeWithIf方法的反编译代码:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testBoxedTypeWithConditionalOperation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;InnerClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InnerClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;longValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testBoxedTypeWithIf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;InnerClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InnerClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;idValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;idValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;可以看到，testBoxedTypeWithConditionalOperation中将条件运算中的包装类型解包装了，在testBoxedTypeWithIf中将原始类型包装了。&lt;/p&gt;

&lt;p&gt;在我以往的认知中，包装类型与原始类型的自动包装与解包装的操作，就像testBoxedTypeWithIf中，是在这些变量之间有直接的比较、赋值或者计算（如加减乘除）的时候。然而在本例的条件运算中，即使看似没有直接的关系，编译器依然对包装类型做了解包装的操作。&lt;/p&gt;

&lt;p&gt;所以，在包装类型与条件运算混用的时候，要么用if判断替代条件运算，要么在条件运算的判断条件中先对包装类型是否为空做判断，做法如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testBoxedTypeWithCorrectConditionalOperation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;InnerClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InnerClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;对于本例中用的测试用例，即flag == true，testBoxedTypeWithCorrectConditionalOperation将输出0。&lt;/p&gt;

&lt;p&gt;通过反编译代码发现，条件运算与if判断只是在程序的执行路径上保持一致，具体的执行细节，因不同编程语言而异。而今Java前端与后端编译器越来越聪明，对程序员来说不见得是一件好事儿。&lt;/p&gt;
</description>
				<pubDate>Sat, 02 Jul 2016 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/2016/07/boxed-type-conditional-op</link>
				<guid isPermaLink="true">http://localhost:4000/2016/07/boxed-type-conditional-op</guid>
			</item>
		
			<item>
				<title>Java代码规范实践手册</title>
				<description>&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/pygments.css&quot; /&gt;

&lt;p&gt;　　舒适区最早是心理学的一个概念，它与人类的压力有着直接的关系。顾名思义，处于这一区域，你会感到非常舒服，觉察不到任何真正的压力，或者用自我麻痹来勉强应对它们。因此，我们既没有强烈的改变欲望，也不会主动地付出太多的努力，所有的行为，无非是为了保持舒适的感觉和假象而已。&lt;/p&gt;

&lt;p&gt;——摘自《逃离舒适区》&lt;/p&gt;

&lt;p&gt;　　程序员从学会第一行“hello world”开始，就逐渐培养起了自己的开发习惯。这些习惯或许来自于讲台上的讲师、搞笑娱乐平台百度知道、同性交友网github等。阅尽网络上难以保证质量的代码，培养了各种各样的毒瘤习惯，而我们却乐在其中。&lt;/p&gt;

&lt;p&gt;　　是不是觉得Spark、Flume很高端？TB级数据碉堡了吧？把屈指可数的几个线程玩弄于股掌之中？&lt;/p&gt;

&lt;p&gt;　　“Talk is cheap. Show me the code.”– Linus Torvalds(http://coolshell.cn/articles/1278.html)&lt;/p&gt;

&lt;p&gt;　　本人从业多年，却依旧写不好一行代码。决心踏出舒适区，从变量命名开始，重塑编码习惯。本文将从代码规范实践的3个等级(初学乍练，融会贯通，登峰造极)，指导开发者如何在项目中引入代码规范。
题外话：引入代码规范，是为了后续能够顺利进行Code Review。有很多优秀博文已经论述了code review的重要性，其中一篇：http://coolshell.cn/articles/11432.html 。&lt;/p&gt;

&lt;p&gt;注：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;本文仅适用于使用intelliJ IDEA(14.1.x)开发并使用Maven执行构建的开发者。&lt;/li&gt;
  &lt;li&gt;业内认可的规范包括Google规范和Sun规范，本次实践所使用的规范是Sun规范。&lt;/li&gt;
  &lt;li&gt;Checkstyle是本次实践的核心工具。本次实践将通过插件使用checkstyle。&lt;/li&gt;
  &lt;li&gt;本次实践的代码规范检查仅用于基础检查。团队各异的规定，还需事先定制好。余额宝，是yuebao，还是yuEBao，还是balancePackage？&lt;/li&gt;
  &lt;li&gt;之后附录里会加入checkstyle的检查内容（没那么快）。&lt;/li&gt;
&lt;/ol&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;初学乍练&quot;&gt;初学乍练&lt;/h1&gt;

&lt;p&gt;　　在此阶段的实践中，基本上属于程序员的自娱自乐。开发者在自己的intelliJ上安装代码风格插件，用于检查编辑器内的Java代码。建议使用checkstyle插件，这是一款默认使用Sun规范检查代码的插件，可以实时检查当前源码文件，检查整个项目，并且支持更换规范规则。&lt;/p&gt;

&lt;p&gt;　　集成步骤如下：&lt;/p&gt;

&lt;p&gt;　　1. 打开settings，选择Plugins：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image1.png&quot; alt=&quot;java_code_convention_image_1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　2. 选择Browse repositories并输入checkstyle：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image2.png&quot; alt=&quot;java_code_convention_image_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　然后选择右半窗口的Install plugin进行安装。因本人IDE已经安装，所以显示了Update plugin。&lt;/p&gt;

&lt;p&gt;　　安装完成之后，IDE下方的工具栏里，会出现checkstyle的窗口：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image3.png&quot; alt=&quot;java_code_convention_image_3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　3. 点开checkstyle窗口，下拉选择规则：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image4.png&quot; alt=&quot;java_code_convention_image_4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　初次安装，只会有默认规则，即Sun规范规则。&lt;/p&gt;

&lt;p&gt;　　4. 选中默认规则，点击左边绿色箭头，进行当前文件检查，结果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image5.png&quot; alt=&quot;java_code_convention_image_5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　可以看到checkstyle窗口列出了错误的原因，比如Missing a Javadoc comment表示没有写注释。双击错误的原因，光标会跳到错误出现的代码行。&lt;/p&gt;

&lt;p&gt;　　5. 当然还可以增加新的规范规则文件，打开settings里的other settings：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image6.png&quot; alt=&quot;java_code_convention_image_6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　可以看到默认规则选用的就是sun_checks.xml，表示Sun的规范文件。我们可以在https://github.com/leesir/checkstyle 下载到最新的Google规范和Sun规范，以及最新的checkstyle插件源代码。&lt;/p&gt;

&lt;p&gt;　　当需要更换规则时，如上图，把规范加入到checkstyle中即可。此时checkstyle默认是不会勾选规则文件的，所以此时的插件不会进行实时检查。&lt;/p&gt;

&lt;p&gt;　　6. 当勾选其中任何一个规则并确定之后，checkstyle的实时检查就生效了，效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image7.png&quot; alt=&quot;java_code_convention_image_7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　鼠标移动到红色字体之上，即可看到错误的提示，检查结果与手动点击绿色箭头进行检查的结果是一致的。&lt;/p&gt;

&lt;p&gt;　　7. 我们可以针对此文件的规范错误进行修正：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image8.png&quot; alt=&quot;java_code_convention_image_8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　第一个：Missing package-info.java file. (0:0)。(0:0)不是在卖萌，表示的是第0行第0个字符出现了错误。意思是缺少包信息描述类。&lt;/p&gt;

&lt;p&gt;　　8. 那我们就在该类所在的包下新建一个package-info.java：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image9.png&quot; alt=&quot;java_code_convention_image_9&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　编写好注释：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image10.png&quot; alt=&quot;java_code_convention_image_10&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　9. 此时切换到Main.java，可以看到package处的错误已经消失，说明我们已经修正了该处的错误：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image11.png&quot; alt=&quot;java_code_convention_image_11&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　10. 接着一鼓作气，改掉其他的错误，源代码效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image12.png&quot; alt=&quot;java_code_convention_image_12&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　可以看到该文件已经没有任何规范错误，至此，我们完成了第一个文件的代码规范修复(请做好准备，随便一个项目出现的规范错误数都会在2000以上，上不封顶)。修复后的Main.java是不是更加professional了?&lt;/p&gt;

&lt;p&gt;　　第一个等级的图文教程已经结束，文章末尾将会附上定制过的Sun规范文件。不使用默认规范的原因是检查太过于严厉，以至于Java源代码都不如其法眼。可以逐步开放规范中的限制，循序渐进地向标准靠拢。不建议初次引入规范，就要达到标准的程度，程序员心理压力太大，效果会适得其反。&lt;/p&gt;

&lt;p&gt;　　初学乍练等级的规范检查，由于检查的地点是在个人电脑上，所以当然也有人不安装检查插件，或者不愿意修改规范错误，从而导致源代码库中依然存有不符合规范的代码。&lt;/p&gt;

&lt;h1 id=&quot;融会贯通&quot;&gt;融会贯通&lt;/h1&gt;

&lt;p&gt;　　全世界的程序员中，自由开发者占少数。所以自娱自乐的代码规范实践，并不能满足身处团队需要协作的程序员们。所以，本小节将会把上一小节的代码规范实践，通过引入Maven扩展插件，推广到项目组中。&lt;/p&gt;

&lt;p&gt;　　将最新的Maven checkstyle插件加入到pom文件中：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image13.png&quot; alt=&quot;java_code_convention_image_13&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　更新maven，会自动下载该maven插件。使用mvn checkstyle:checkstyle或者mvn validate(可配置成package或者install等)均可在编译时进行规范检查。效果如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image14.png&quot; alt=&quot;java_code_convention_image_14&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　可以看到控制台中输出了很多规范错误，内容提示同上一小节。
　　请注意红色框框内的内容，大致意思是maven编译的结果并不会因为源代码中存在规范错误而失败。在团队协作中，还是建议把maven编译的结果同规范检查的结果关联起来，这样就能保证源代码库中的代码是符合规范的。可以修改以下配置达到这一目标：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image15.png&quot; alt=&quot;java_code_convention_image_15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　可以在Maven生成的targer文件夹下，查看规范检查的结果以及所使用的规范文件：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image16.png&quot; alt=&quot;java_code_convention_image_16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　打开checkstyle-result.xml，可以看到每个文件的错误以及提示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image17.png&quot; alt=&quot;java_code_convention_image_17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　至此，我们通过强制在编译过程中加入了规范检查，达到了在项目中引入代码规范的目的。&lt;/p&gt;

&lt;p&gt;　　请注意，Maven的checkstyle插件和intelliJ的checkstyle插件没有半毛钱关系。intelliJ的插件在代码未完成时，就已经开始工作，而Maven的插件在代码完成之后的编译过程中才开始工作。单独使用其中某一个，都可以到达这一等级的代码规范。&lt;/p&gt;

&lt;p&gt;　　比如使用intelliJ插件，程序员需保证每个人安装的插件版本一致，并且每个人都需要开启实时检查功能，才能够让整个团队的规范保持一致。然而并不是每个人都喜欢在写代码时看到一大堆鲜艳的红色错误，某些人肯定会在编写代码时关闭实时检查功能，可以肯定的是，除非团队已经非常默契，否则源代码库中一定会包含不符合规范的代码。&lt;/p&gt;

&lt;p&gt;　　使用Maven插件，产生的编译错误信息通常会更加令人紧张，也会更加谨慎。并且源代码版本库会记录pom.xml，加入到团队中的任何一个人都会被强制性地进行编译时的规范校验，所有人的行为都将统一，除非有人蓄意破坏团队规则(如编译时注释掉插件)。相对而言，使用Maven插件更能保证团队代码规范不被破坏。&lt;/p&gt;

&lt;p&gt;　　而intelliJ + Maven插件的混合使用，使得每个人既在编码时纠正规范错误，同时在编译时进一步校验源代码中是否有不符合规范的地方。&lt;/p&gt;

&lt;p&gt;　　注：因Maven插件更新较慢，最新版本对应的checkstyle版本为6.2，而最新的intelliJ插件对应的checkstyle版本为6.11。版本不一致，会导致双方的检查结果不一致。为了配合Maven插件，我们必须使用checkstyle版本号在6.2左右的intelliJ插件。在本文末尾将会附上使用6.5版本checkstyle的intelliJ插件。只需将插件压缩包解压，把内部的CheckStyle-IDEA文件夹拷贝到intelliJ IDEA安装目录下的plugins里，重启后即可生效。经测试，6.2与6.5版本的checkstyle检查的结果一致。&lt;/p&gt;

&lt;h1 id=&quot;登峰造极&quot;&gt;登峰造极&lt;/h1&gt;

&lt;p&gt;　　除了上述两种集成checkstyle的方法以外，还可以在SVN、Git等代码管理工具里加入checkstyle插件。只要某次提交中包含了不符合规范的代码，将会被拒绝写入到版本库中。对于实施了持续集成的团队，也可以在每次构建中，首先进行源代码规范检查，一旦发现错误，将停止构建，然后群发通报邮件，并且停止构建的部分损失由责任人来承担。通过在代码编写过程中的各个时期，进行各种检查，我有一百种方法让开发者不敢随意提交代码。这种方式几乎可以保证代码库中不存在不规范的代码，同时也是最难以实施以及最残忍的一种实践方式。由于时间关系，没能做到这一等级的实践，其实心里也有些许害怕，担心推广到团队之后会被同事殴打。&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;　　不管何种方式，核心思想都是通过checkstyle引入代码规范。将checkstyle作用于代码上线前的不同时期，将会得到不同的结果，所以也就有了上述的等级一说。当然，如果团队中每一个人不依靠checkstyle就能写出符合最高标准的代码，这便是终极等级——得道升仙。&lt;/p&gt;

&lt;h1 id=&quot;成果&quot;&gt;成果&lt;/h1&gt;

&lt;p&gt;　　checkstyle代码规范检查在天天基金服务中正式启用。当装上intelliJ IDEA插件的那一刻，我的天空都灰暗了。面对着已经细到点不动的结果页面的滚动条，一片通红的编辑器，我艰难地做出了降低标准的决定。&lt;/p&gt;

&lt;p&gt;　　经过一个多星期的修复，天天基金中某一个服务(并非全部)的代码终于纠正完毕。然而结果却不那么值得称赞，因为存在不少“为了写注释而写注释”的行为。编写注释对于大多数程序员而言，难度比编写代码高得多。集中几句话，把代码意图表达清楚，是十分考验表达能力的。不管如何，此次实践已经是一大突破，接下来将展示引入代码规范的部分成果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image18.png&quot; alt=&quot;java_code_convention_image_18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　生成标准Javadoc之后，package-info.java发挥了大作用。在Javadoc首页，可以看到每个包的描述。点进aop包，可以看到aop下所有类的描述：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image19.png&quot; alt=&quot;java_code_convention_image_19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　点击某个类，能看到每个方法的主要作用：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image20.png&quot; alt=&quot;java_code_convention_image_20&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　再来看看代码：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_11_21_image21.png&quot; alt=&quot;java_code_convention_image_21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　是不是有点赏心悦目呢？篇幅有限，很遗憾并不能完整展示整个项目。&lt;/p&gt;

&lt;p&gt;　　对于新进团队的员工，可以通过阅读Javadoc文档快速了解一个项目的组织架构，阅读带有详细注释的方法了解代码的意图。除此之外，符合团队规范的代码才建议组织code review，因为大家聚在一起，不是为了看你的常量命名是否规范、检查哪个方法是否编写注释这种低级问题，不要让奇怪的代码风格降低code review的效率。&lt;/p&gt;

&lt;p&gt;　　在此感谢组内小伙伴无偿的支持。规范化是一条很长的路，一个团队的就算达到了得道升仙的水平，也依然有继续奋斗的目标——制定标准。&lt;/p&gt;

&lt;p&gt;　　感谢阅读。&lt;/p&gt;
</description>
				<pubDate>Sat, 21 Nov 2015 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/2015/11/java-cr-code-convention</link>
				<guid isPermaLink="true">http://localhost:4000/2015/11/java-cr-code-convention</guid>
			</item>
		
			<item>
				<title>泛型中&lt;? super T>和&lt;? extends T>的区别</title>
				<description>&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/pygments.css&quot; /&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/4343202/difference-between-super-t-and-extends-t-in-java&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;　　我们会经常发现List&amp;lt;? super T&amp;gt;、Set&amp;lt;? extends T&amp;gt;的声明，是什么意思呢？&amp;lt;? super T&amp;gt;表示包括T在内的任何T的父类，&amp;lt;? extends T&amp;gt;表示包括T在内的任何T的子类，下面我们详细分析一下两种通配符具体的区别。&lt;/p&gt;

&lt;h1 id=&quot;extends&quot;&gt;extends&lt;/h1&gt;

&lt;p&gt;　　List&amp;lt;? extends Number&amp;gt; foo3的通配符声明，意味着以下的赋值是合法的：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Number &quot;extends&quot; Number (in this context)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;  
&lt;span class=&quot;c1&quot;&gt;// Integer extends Number&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;// Double extends Number&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;!-- more --&gt;

&lt;p&gt;　　读取操作&lt;/p&gt;

&lt;p&gt;　　通过以上给定的赋值语句，你一定能从foo3列表中读取到的元素的类型是什么呢？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;你可以读取到Number，因为以上的列表要么包含Number元素，要么包含Number的类元素。&lt;/li&gt;
  &lt;li&gt;你不能保证读取到Integer，因为foo3可能指向的是List&amp;lt;Double&amp;gt;。&lt;/li&gt;
  &lt;li&gt;你不能保证读取到Double，因为foo3可能指向的是List&amp;lt;Integer&amp;gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　写入操作&lt;/p&gt;

&lt;p&gt;　　通过以上给定的赋值语句，你能把一个什么类型的元素合法地插入到foo3中呢？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;你不能插入一个Integer元素，因为foo3可能指向List&amp;lt;Double&amp;gt;。&lt;/li&gt;
  &lt;li&gt;你不能插入一个Double元素，因为foo3可能指向List&amp;lt;Integer&amp;gt;。&lt;/li&gt;
  &lt;li&gt;你不能插入一个Number元素，因为foo3可能指向List&amp;lt;Integer&amp;gt;。&lt;/li&gt;
  &lt;li&gt;你不能往List&amp;lt;? extends T&amp;gt;中插入任何类型的对象，因为你不能保证列表实际指向的类型是什么，你并不能保证列表中实际存储什么类型的对象。唯一可以保证的是，你可以从中读取到T或者T的子类。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;super&quot;&gt;super&lt;/h1&gt;

&lt;p&gt;　　现在考虑一下List&amp;lt;? super T&amp;gt;。List&amp;lt;? super Integer&amp;gt; foo3的通配符声明，意味着以下赋值是合法的：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Integer is a &quot;superclass&quot; of Integer (in this context)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;  
&lt;span class=&quot;c1&quot;&gt;// Number is a superclass of Integer&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;   
&lt;span class=&quot;c1&quot;&gt;// Object is a superclass of Integer&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;   &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;　　读取操作&lt;/p&gt;

&lt;p&gt;　　通过以上给定的赋值语句，你一定能从foo3列表中读取到的元素的类型是什么呢？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;你不能保证读取到Integer，因为foo3可能指向List&amp;lt;Number&amp;gt;或者List&amp;lt;Object&amp;gt;。&lt;/li&gt;
  &lt;li&gt;你不能保证读取到Number，因为foo3可能指向List&amp;lt;Object&amp;gt;。&lt;/li&gt;
  &lt;li&gt;唯一可以保证的是，你可以读取到Object或者Object子类的对象（你并不知道具体的子类是什么）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　写入操作&lt;/p&gt;

&lt;p&gt;　　通过以上给定的赋值语句，你能把一个什么类型的元素合法地插入到foo3中呢？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;你可以插入Integer对象，因为上述声明的列表都支持Integer。&lt;/li&gt;
  &lt;li&gt;你可以插入Integer的子类的对象，因为Integer的子类同时也是Integer，原因同上。&lt;/li&gt;
  &lt;li&gt;你不能插入Double对象，因为foo3可能指向ArrayList&amp;lt;Integer&amp;gt;。&lt;/li&gt;
  &lt;li&gt;你不能插入Number对象，因为foo3可能指向ArrayList&amp;lt;Integer&amp;gt;。&lt;/li&gt;
  &lt;li&gt;你不能插入Object对象，因为foo3可能指向ArrayList&amp;lt;Integer&amp;gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;pecs&quot;&gt;PECS&lt;/h1&gt;

&lt;p&gt;请记住PECS原则：生产者（Producer）使用extends，消费者（Consumer）使用super。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;生产者使用extends
如果你需要一个列表提供T类型的元素（即你想从列表中读取T类型的元素），你需要把这个列表声明成&amp;lt;? extends T&amp;gt;，比如List&amp;lt;? extends Integer&amp;gt;，因此你不能往该列表中添加任何元素。&lt;/li&gt;
  &lt;li&gt;消费者使用super
如果需要一个列表使用T类型的元素（即你想把T类型的元素加入到列表中），你需要把这个列表声明成&amp;lt;? super T&amp;gt;，比如List&amp;lt;? super Integer&amp;gt;，因此你不能保证从中读取到的元素的类型。&lt;/li&gt;
  &lt;li&gt;即是生产者，也是消费者
如果一个列表即要生产，又要消费，你不能使用泛型通配符声明列表，比如List&amp;lt;Integer&amp;gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;例子&quot;&gt;例子&lt;/h1&gt;

&lt;p&gt;　　请参考java.util.Collections里的copy方法：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/post_2015_10_23_image1.png&quot; alt=&quot;collections_copy_code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　我们可以从Java开发团队的代码中获得到一些启发，copy方法中使用到了PECS原则，实现了对参数的保护。&lt;/p&gt;
</description>
				<pubDate>Fri, 23 Oct 2015 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/2015/10/java-qa-generics-extends-super</link>
				<guid isPermaLink="true">http://localhost:4000/2015/10/java-qa-generics-extends-super</guid>
			</item>
		
			<item>
				<title>一个Java 8中简单Lambda表达式程序</title>
				<description>&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/pygments.css&quot; /&gt;

&lt;p&gt;&lt;a href=&quot;http://www.javacodegeeks.com/2013/05/a-simple-application-of-lambda-expressions-in-java-8.html&quot;&gt;原文链接&lt;/a&gt; 作者: &lt;a href=&quot;http://www.javacodegeeks.com/author/Mohamed-Sanaulla/&quot;&gt;Mohamed Sanaulla&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;　　我尝试过把Lambda表达式融入到我的代码中，下面的代码例子是此次尝试的结果。对于那些完全不知道Lambda表达式的Java程序员，我强烈建议在继续阅读之前，浏览一下&lt;a href=&quot;http://blog.sanaulla.info/2013/03/11/using-lambda-expression-to-sort-a-list-in-java-8-using-netbeans-lambda-support/&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;　　Ok，现在你已经熟悉Lambda表达式了（在阅读过推荐的Lambda入门文章之后），那我们现在开始学习一个我认为很好的Lambda表达式的例子。&lt;/p&gt;

&lt;p&gt;　　考虑一下这种场景：某些操作在执行之前需要做预处理，执行之后需要做后期处理。待执行的操作会随着行为的不同而变化。预处理会提取出这个操作所需的必要参数，后期处理做一些清理的工作。&lt;/p&gt;

&lt;p&gt;　　我们来看看如何利用接口与接口的匿名实现类模拟这个场景。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;#使用匿名内部类&lt;/p&gt;

&lt;p&gt;　　一个提供了必要行为方法的接口实现：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OldPerformer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;　　接下来是一些预处理和后期处理方法：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PrePostDemo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OldPerformer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;performer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Pre-Processing...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Fetching the status for id: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//Some status value fetched&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;performer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;performTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Post-processing...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;　　我们需要传递2样东西：预处理所需的标识，以及操作的实现。如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PrePostDemo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//has to be declared final to be accessed within&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//the anonymous inner class.&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outsideOfImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Common Value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;performTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1234&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OldPerformer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Finding data based on id...&quot;&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outsideOfImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Asserting that the status matches&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
	
	    &lt;span class=&quot;n&quot;&gt;performTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4567&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OldPerformer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Finding data based on id...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outsideOfImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Update status of the data found&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;　　从上面的代码可以看出，匿名内部类外部的变量要想被匿名内部类访问，需要声明成final。例子的代码输出如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Processing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Fetching&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1234&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Finding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;based&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Common&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Asserting&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;that&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matches&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;processing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;PreProcessing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Fetching&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;id:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4567&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Finding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;based&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Common&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Update&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;processing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;#使用Lambda表达式&lt;/p&gt;

&lt;p&gt;　　我们来看看如何用Lambda表达式实现上述例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PrePostLambdaDemo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//Need not be declared as final for use within a&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//lambda expression, but has to be eventually final.&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outsideOfImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Common Value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;doSomeProcessing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;123&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Finding some data based on&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outsideOfImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Assert that the status is &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
		
		&lt;span class=&quot;n&quot;&gt;doSomeProcessing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;456&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Finding data based on id: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outsideOfImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;And updating the status: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doSomeProcessing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Performer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;performer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Pre-Processing...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Finding status for given id: &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;performer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;performTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Post-processing...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Performer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;　　除了有趣的Lambda表达式语法之外，还有一点不同，那就是Lambda表达式外部的变量没有声明成final。但最终变量还是会成为常量，这意味着outsideOfImpl 在声明及初始化之后的值不能被更改。&lt;/p&gt;

&lt;p&gt;　　这个例子只是展示了如何使用清晰明了的Lambda表达式代替匿名内部类。&lt;/p&gt;

&lt;p&gt;　　一个小提示：JDK8的发布时间推迟到了2014年2月，完整的发布时间表可以从&lt;a href=&quot;http://openjdk.java.net/projects/jdk8/&quot;&gt;这里&lt;/a&gt;查阅。我每天都会更新Lambda的构建项目，如果在最新的构建中出现了任何问题，请随时联系我。我会尽最大努力持续构建，并且会在这里发表最新的例子。&lt;/p&gt;

&lt;p&gt;　　另一个提示：不要让Java 8的更新使你不知所措，大部分新特性已经存在于其他编程语言中。我发现学习Lambda表达式的语法和方法可以帮助我以函数式的思维进行思考，对此我还应特别感谢Scala闭包。&lt;/p&gt;

&lt;p&gt;　　&lt;/p&gt;
</description>
				<pubDate>Thu, 22 Oct 2015 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/2015/10/java-fp-java8-lambda</link>
				<guid isPermaLink="true">http://localhost:4000/2015/10/java-fp-java8-lambda</guid>
			</item>
		
	</channel>
</rss>
